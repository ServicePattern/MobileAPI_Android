package com.brightpattern.bpcontactcenter.interfaces

import com.brightpattern.bpcontactcenter.entity.ContactCenterEvent
import com.brightpattern.bpcontactcenter.model.ContactCenterChatSessionProperties
import com.brightpattern.bpcontactcenter.model.ContactCenterServiceAvailability
import com.brightpattern.bpcontactcenter.utils.Result
import org.json.JSONObject

interface ContactCenterCommunicating {
    // -- Initialization
    /// Base URL to make requests
    val baseURL: String

    /// Identifies your contact center.
    /// It corresponds to the domain name of your contact center that you see in the upper right corner of the Contact Center Administrator application after login.
    val tenantURL: String

    /// Unique identifier of the Messaging/Chat scenario entry that will be used to associate your application with a specific scenario
    val appID: String

    /// Unique identifier of the client application. It is used to identify communication sessions of a particular instance of the mobile application (i.e., of a specific mobile device).
    /// It must be generated by the mobile application in the UUID format. If clientId is set to WebChat, HTTP cookies will be used for client identification.
    val clientID: String

    //  -- Client events delegate
    /// Chat events delegate
    /// If successful returns an array of chat events [ContactCenterEvent](x-source-tag://ContactCenterEvent) for the current session that came from the server or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    var delegate: ContactCenterEventsInterface?

    // -- Chat
    /// Checks the current status of configured services
    /// - Parameters:
    ///   - completion: Current status [ContactCenterServiceAvailability](x-source-tag://ContactCenterServiceAvailability) of configured services if successful or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun checkAvailability(completion: (result: Result<ContactCenterServiceAvailability, Error>) -> Unit)

    /// Returns all client events and all server events for the current session. Multiple event objects can be returned; each event's timestamp attribute can be used to restore the correct message order.
    /// - Parameters:
    ///   - chatID: The current chat ID
    ///   - completion: Chat client and server events [ContactCenterEvent](x-source-tag://ContactCenterEvent) or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun getChatHistory(chatID: String, completion: (result: Result<List<ContactCenterEvent>, Error>) -> Unit)

    /// Returns all client events and all server events for all sessions related to the CRM case defined by the scenario which handles a current chat session. For each session, multiple event objects can be returned; each event's timestamp attribute can be used to restore the correct message order.
    /// - Parameters:
    ///   - chatID: The current chat ID
    ///   - completion: Chat sessions with client and server events [ContactCenterChatSession](x-source-tag://ContactCenterEvent) or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun getCaseHistory(chatID: String, completion: (result: Result<List<ContactCenterEvent>, Error>) -> Unit)

    /// Request Chat initiates a chat session. It provides values of all or some of the expected parameters, and it may also contain the phone number of the mobile device. Note that if the mobile scenario entry is not configured for automatic callback, the agent can still use this number to call the mobile user manually, either upon the agent's own initiative or when asked to do this via a chat message from the mobile user.
    /// - Parameters:
    ///   - phoneNumber: phone number for callback, if necessary
    ///   - from: Propagated into scenario variable $(item.from). May be used to specify either the device ownerâ€™s name or phone number.
    ///   - parameters: Additional parameters.
    ///   - completion: Returns chat session properties that includes `chatID` in [ContactCenterChatSessionProperties](x-source-tag://ContactCenterChatSessionProperties) or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun requestChat(phoneNumber: String, from: String, parameters: JSONObject, completion: (Result<ContactCenterChatSessionProperties, Error>) -> Unit)

    /// Send a chat message. Before message is sent the function generates a `messageID` which is returned in a completion
    /// - Parameters:
    ///   - chatID: The current chat ID
    ///   - message: Text of the message
    ///   - completion: Returns  `messageID` in the format chatId:messageNumber where messageNumber is ordinal number of the given message in the chat exchange or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun sendChatMessage(chatID: String, message: String, completion: (Result<String, Error>) -> Unit)

    /// Confirms that a chat message has been delivered to the application
    /// - Parameters:
    ///   - chatID: The current chat ID
    ///   - messageID: The message ID
    ///   - completion: Returns ` .success` or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun chatMessageDelivered(chatID: String, messageID: String, completion: (Result<String, Error>) -> Unit)

    /// Confirms that a chat message has been read by the user
    /// - Parameters:
    ///   - chatID: The current chat ID
    ///   - messageID: The message ID
    ///   - completion: Returns `.success` or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun chatMessageRead(chatID: String, messageID: String, completion: (Result<String, Error>) -> Unit)

    /// Informs that a user started to type in a new chat message
    /// - Parameters:
    ///   - chatID: The current chat ID
    ///   - completion: Returns `.success` or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun chatTyping(chatID: String, completion: (Result<String, Error>) -> Unit)

    /// Informs that a user stopped to type in a new chat message
    /// - Parameters:
    ///   - chatID: The current chat ID
    ///   - completion: Returns `.success` or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun chatNotTyping(chatID: String, completion: (Result<String, Error>) -> Unit)

    /// Request to disconnect chat conversation but keep the session active. Server may continue communicating with the client
    /// - Parameters:
    ///   - chatID: The current chat ID
    ///   - completion: Returns `.success` or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun disconnectChat(chatID: String, completion: (Result<String, Error>) -> Unit)

    /// Request to disconnect chat conversation and complete the session. Server will not continue communicating with the client once request is sent
    /// - Parameters:
    ///   - chatID: The current chat ID
    ///   - completion: Returns `.success` or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun endChat(chatID: String, completion: (Result<String, Error>) -> Unit)

    /// Subscribes for push notifications from APNs server
    ///
    /// This function should be called each time `chatID` is changed
    /// - Parameters:
    ///   - chatID: The current chat ID
    ///   - deviceToken: Unique to both the device and the app. Which is received in `didRegisterForRemoteNotificationsWithDeviceToken`
    ///   - completion: Returns `.success` or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun subscribeForRemoteNotificationsAPNs(chatID: String, deviceToken: String, completion: (Result<Void, Error>) -> Unit)

    /// Subscribes for push notifications from APNs server when using Firebase service.
    /// Firebase gives one more layer of flexibility to have event more granular control of notifications that are sent to the users devices.
    ///
    /// This function should be called each time `chatID` is changed
    /// - Parameters:
    ///   - chatID: The current chat ID
    ///   - deviceToken: Unique to both the device and the app. Which is received in `didRegisterForRemoteNotificationsWithDeviceToken`
    ///   - completion: Returns `.success` or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    fun subscribeForRemoteNotificationsFirebase(chatID: String, deviceToken: String, completion: (Result<String, Error>) -> Unit)

    /// Notify contact center library about new remote notification
    /// - Parameters:
    ///   - userInfo: Contains a payload with a new event from a backend which is received in `didReceiveRemoteNotification` or `userNotificationCenter`
    fun appDidReceiveMessage(userInfo: Map<Any, Any>)
}