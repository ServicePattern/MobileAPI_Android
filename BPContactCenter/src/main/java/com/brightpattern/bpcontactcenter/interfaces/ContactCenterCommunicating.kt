package com.brightpattern.bpcontactcenter.interfaces

import com.brightpattern.bpcontactcenter.entity.ContactCenterEvent
import com.brightpattern.bpcontactcenter.model.ContactCenterChatSessionProperties
import com.brightpattern.bpcontactcenter.model.ContactCenterServiceAvailability
import com.brightpattern.bpcontactcenter.model.ContactCenterVersion
import com.brightpattern.bpcontactcenter.model.http.ChatSessionCaseHistoryDto
import com.brightpattern.bpcontactcenter.utils.Result
import org.json.JSONObject
import java.util.*

interface ContactCenterCommunicating {
    enum class ContentFormat {
        TEXT, HTML
    }

    // -- Initialization
    /** Base URL to make requests **/
    val baseURL: String

    /**
     * Identifies your contact center.
     * It corresponds to the domain name of your contact center that you see in the upper right corner of the Contact Center Administrator application after login.
     **/
    val tenantURL: String

    /**
     *  Unique identifier of the Messaging/Chat scenario entry that will be used to associate your application with a specific scenario
     */
    val appID: String

    /**
     * Unique identifier of the client application. It is used to identify communication sessions of a particular instance of the mobile application (i.e., of a specific mobile device).
     * It must be generated by the mobile application in the UUID format. If clientId is set to WebChat, HTTP cookies will be used for client identification.
     **/
    val clientID: String

    //  -- Client events delegate
    /**
     * Event' callback
     * **/
    var delegate: ContactCenterEventsInterface?

    /**
     * Returns server version.
     * @param completion: Chat client and server events or [Error] otherwise
     **/
    fun getVersion(completion: (result: Result<ContactCenterVersion, Error>) -> Unit)

    // -- Chat
    /** Checks the current status of configured services
     * @param completion closure
     **/
    fun checkAvailability(completion: (result: Result<ContactCenterServiceAvailability, Error>) -> Unit)

    /**
     * Returns all client events and all server events for the current session. Multiple event objects can be returned; each event's timestamp attribute can be used to restore the correct message order.
     * @param chatID The current chat ID
     * @param completion: Chat client and server events or [Error] otherwise
     **/
    fun getChatHistory(chatID: String, completion: (result: Result<List<ContactCenterEvent>, Error>) -> Unit)

    /**
     * Returns all client events and all server events for all sessions related to the CRM case defined by the scenario which handles a current chat session. For each session, multiple event objects can be returned; each event's timestamp attribute can be used to restore the correct message order.
     * @param chatID The current chat ID
     * @param completion: Chat sessions with client and server events or [Error] otherwise
     **/
    fun getCaseHistory(chatID: String, completion: (result: Result<ChatSessionCaseHistoryDto, Error>) -> Unit)

    /**
     * Request Chat initiates a chat session. It provides values of all or some of the expected parameters, and it may also contain the phone number of the mobile device. Note that if the mobile scenario entry is not configured for automatic callback, the agent can still use this number to call the mobile user manually, either upon the agent's own initiative or when asked to do this via a chat message from the mobile user.
     * @param phoneNumber: phone number for callback, if necessary
     * @param from: Propagated into scenario variable $(item.from). May be used to specify either the device ownerâ€™s name or phone number.
     * @param parameters: Additional parameters.
     * @param completion: Returns chat session properties that includes `chatID` or [Error] otherwise
     **/
    fun requestChat(phoneNumber: String, from: String, parameters: JSONObject, completion: (Result<ContactCenterChatSessionProperties, Error>) -> Unit)

    /**
     * Send a chat message. Before message is sent the function generates a `messageID` which is returned in a completion
     * @param chatID: The current chat ID
     * @param content: Content of the message (text or HTML depending on format)
     * @param format: Message content format (plain text or HTML)
     * @param completion: Returns unique `messageID` in the chat exchange or [Error] otherwise
     **/
    fun sendChatMessage(chatID: String, content: String, format: ContentFormat, messageID: UUID? = null, completion: (Result<String, Error>) -> Unit)

    /**
     * Confirms that a chat message has been delivered to the application
     * @param chatID: The current chat ID
     * @param messageID: The message ID
     * @param completion: Returns ` .success` or [Error] otherwise
     **/
    fun chatMessageDelivered(chatID: String, messageID: String, completion: (Result<String, Error>) -> Unit)

    /** Confirms that a chat message has been read by the user
     * @param chatID: The current chat ID
     * @param messageID: The message ID
     * @param completion: Returns `.success` or [Error] otherwise
     **/
    fun chatMessageRead(chatID: String, messageID: String, completion: (Result<String, Error>) -> Unit)

    /** Informs that a user started to type in a new chat message
     * @param chatID: The current chat ID
     * @param completion: Returns `.success` or [Error] otherwise
     **/
    fun chatTyping(chatID: String, completion: (Result<String, Error>) -> Unit)

    /** Informs that a user stopped to type in a new chat message
     * @param chatID: The current chat ID
     * @param completion: Returns `.success` or [Error] otherwise
     **/
    fun chatNotTyping(chatID: String, completion: (Result<String, Error>) -> Unit)

    /** Request to disconnect chat conversation but keep the session active. Server may continue communicating with the client
     * @param chatID: The current chat ID
     * @param completion: Returns `.success` or [Error] otherwise
     **/
    fun disconnectChat(chatID: String, completion: (Result<String, Error>) -> Unit)

    /** Request to disconnect chat conversation and complete the session. Server will not continue communicating with the client once request is sent
     * @param chatID: The current chat ID
     * @param completion: Returns `.success` or [Error] otherwise
     **/
    fun endChat(chatID: String, completion: (Result<String, Error>) -> Unit)

    /** Subscribes for push notifications using Firebase service.
     *
     * This function should be called each time `chatID` is changed
     * @param chatID: The current chat ID
     * @param deviceToken: Unique to both the device and the app. Which is received in `didRegisterForRemoteNotificationsWithDeviceToken`
     * @param completion: Returns `.success` or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
     **/
    fun subscribeForRemoteNotificationsFirebase(chatID: String, deviceToken: String, completion: (Result<String, Error>) -> Unit)

    /** Notify contact center library about new remote notification
     * @param userInfo: Contains a payload with a new event from a backend which is received in `didReceiveRemoteNotification` or `userNotificationCenter`
     **/
    fun appDidReceiveMessage(userInfo: Map<Any, Any>)

    /** Closes the CRM case defined by the scenario which handles a current chat session.
     * @param  chatID: The current chat ID
     * @param completion: Returns `.success` or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
     **/
    fun closeCase(chatID: String, completion: (Result<String, Error>) -> Unit)

    /** Starts polling for chat session server events.
     * @param  chatID: The current chat ID
     * @param completion: Returns `.success` or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
     **/
    fun startPolling(chatID: String, completion: (Result<Boolean, Error>) -> Unit)

    /** Stops polling for chat session server events. Note that the server will terminate a session after configured timeput unless application does not start polling again.
     * @param  chatID: The current chat ID
     * @param completion: Returns `.success` or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
     **/
    fun stopPolling(chatID: String, completion: (Result<Boolean, Error>) -> Unit)
}